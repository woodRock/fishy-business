INFO:__main__:Reading the dataset: fish oil_simple
INFO:__main__:model: Transformer(
  (encoder): Encoder(
    (layers): ModuleList(
      (0-2): 3 x EncoderLayer(
        (self_attention): MultiHeadAttention(
          (query): Linear(in_features=1023, out_features=1023, bias=True)
          (key): Linear(in_features=1023, out_features=1023, bias=True)
          (value): Linear(in_features=1023, out_features=1023, bias=True)
          (fc_out): Linear(in_features=1023, out_features=1023, bias=True)
        )
        (feed_forward): FeedForward(
          (fc1): Linear(in_features=1023, out_features=128, bias=True)
          (fc2): Linear(in_features=128, out_features=1023, bias=True)
          (dropout): Dropout(p=0.2, inplace=False)
        )
        (norm1): LayerNorm((1023,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((1023,), eps=1e-05, elementwise_affine=True)
        (dropout1): Dropout(p=0.2, inplace=False)
        (dropout2): Dropout(p=0.2, inplace=False)
      )
    )
  )
  (decoder): Decoder(
    (layers): ModuleList(
      (0-2): 3 x DecoderLayer(
        (self_attention): MultiHeadAttention(
          (query): Linear(in_features=1023, out_features=1023, bias=True)
          (key): Linear(in_features=1023, out_features=1023, bias=True)
          (value): Linear(in_features=1023, out_features=1023, bias=True)
          (fc_out): Linear(in_features=1023, out_features=1023, bias=True)
        )
        (cross_attention): MultiHeadAttention(
          (query): Linear(in_features=1023, out_features=1023, bias=True)
          (key): Linear(in_features=1023, out_features=1023, bias=True)
          (value): Linear(in_features=1023, out_features=1023, bias=True)
          (fc_out): Linear(in_features=1023, out_features=1023, bias=True)
        )
        (feed_forward): FeedForward(
          (fc1): Linear(in_features=1023, out_features=128, bias=True)
          (fc2): Linear(in_features=128, out_features=1023, bias=True)
          (dropout): Dropout(p=0.2, inplace=False)
        )
        (norm1): LayerNorm((1023,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((1023,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((1023,), eps=1e-05, elementwise_affine=True)
        (dropout1): Dropout(p=0.2, inplace=False)
        (dropout2): Dropout(p=0.2, inplace=False)
        (dropout3): Dropout(p=0.2, inplace=False)
      )
    )
  )
  (fc): Linear(in_features=1023, out_features=1023, bias=True)
)
INFO:__main__:Pre-training the network: Masked Spectra Modelling
INFO:pre_training:Epoch [1/100], Loss: 0.0852, Val: 0.0025
INFO:pre_training:Epoch [2/100], Loss: 0.0705, Val: 0.0021
INFO:pre_training:Epoch [3/100], Loss: 0.0613, Val: 0.0017
INFO:pre_training:Epoch [4/100], Loss: 0.0540, Val: 0.0014
INFO:pre_training:Epoch [5/100], Loss: 0.0483, Val: 0.0013
INFO:pre_training:Epoch [6/100], Loss: 0.0445, Val: 0.0012
INFO:pre_training:Epoch [7/100], Loss: 0.0416, Val: 0.0011
INFO:pre_training:Epoch [8/100], Loss: 0.0394, Val: 0.0010
INFO:pre_training:Epoch [9/100], Loss: 0.0373, Val: 0.0010
INFO:pre_training:Epoch [10/100], Loss: 0.0357, Val: 0.0010
INFO:pre_training:Epoch [11/100], Loss: 0.0343, Val: 0.0013
INFO:pre_training:Epoch [12/100], Loss: 0.0330, Val: 0.0009
INFO:pre_training:Epoch [13/100], Loss: 0.0318, Val: 0.0008
INFO:pre_training:Epoch [14/100], Loss: 0.0307, Val: 0.0008
INFO:pre_training:Epoch [15/100], Loss: 0.0297, Val: 0.0008
INFO:pre_training:Epoch [16/100], Loss: 0.0289, Val: 0.0008
INFO:pre_training:Epoch [17/100], Loss: 0.0281, Val: 0.0007
INFO:pre_training:Epoch [18/100], Loss: 0.0273, Val: 0.0007
INFO:pre_training:Epoch [19/100], Loss: 0.0265, Val: 0.0007
INFO:pre_training:Epoch [20/100], Loss: 0.0258, Val: 0.0007
INFO:pre_training:Epoch [21/100], Loss: 0.0251, Val: 0.0007
INFO:pre_training:Epoch [22/100], Loss: 0.0245, Val: 0.0007
INFO:pre_training:Epoch [23/100], Loss: 0.0239, Val: 0.0007
