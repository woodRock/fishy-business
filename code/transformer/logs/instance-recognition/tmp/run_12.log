INFO:__main__:Reading the dataset: fish instance-recognition
INFO:__main__:model: Transformer(
  (encoder): Encoder(
    (layers): ModuleList(
      (0-3): 4 x EncoderLayer(
        (self_attention): MultiHeadAttention(
          (query): Linear(in_features=2046, out_features=2046, bias=True)
          (key): Linear(in_features=2046, out_features=2046, bias=True)
          (value): Linear(in_features=2046, out_features=2046, bias=True)
          (fc_out): Linear(in_features=2046, out_features=2046, bias=True)
        )
        (feed_forward): FeedForward(
          (fc1): Linear(in_features=2046, out_features=128, bias=True)
          (fc2): Linear(in_features=128, out_features=2046, bias=True)
          (dropout): Dropout(p=0.2, inplace=False)
        )
        (norm1): LayerNorm((2046,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((2046,), eps=1e-05, elementwise_affine=True)
        (dropout1): Dropout(p=0.2, inplace=False)
        (dropout2): Dropout(p=0.2, inplace=False)
      )
    )
  )
  (decoder): Decoder(
    (layers): ModuleList(
      (0-3): 4 x DecoderLayer(
        (self_attention): MultiHeadAttention(
          (query): Linear(in_features=2046, out_features=2046, bias=True)
          (key): Linear(in_features=2046, out_features=2046, bias=True)
          (value): Linear(in_features=2046, out_features=2046, bias=True)
          (fc_out): Linear(in_features=2046, out_features=2046, bias=True)
        )
        (cross_attention): MultiHeadAttention(
          (query): Linear(in_features=2046, out_features=2046, bias=True)
          (key): Linear(in_features=2046, out_features=2046, bias=True)
          (value): Linear(in_features=2046, out_features=2046, bias=True)
          (fc_out): Linear(in_features=2046, out_features=2046, bias=True)
        )
        (feed_forward): FeedForward(
          (fc1): Linear(in_features=2046, out_features=128, bias=True)
          (fc2): Linear(in_features=128, out_features=2046, bias=True)
          (dropout): Dropout(p=0.2, inplace=False)
        )
        (norm1): LayerNorm((2046,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((2046,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((2046,), eps=1e-05, elementwise_affine=True)
        (dropout1): Dropout(p=0.2, inplace=False)
        (dropout2): Dropout(p=0.2, inplace=False)
        (dropout3): Dropout(p=0.2, inplace=False)
      )
    )
  )
  (fc): Linear(in_features=2046, out_features=2, bias=True)
)
INFO:__main__:Training the network
INFO:train:Epoch 1/1000 	Train Loss: 0.7056, Train Acc: 0.6071	 Val Loss: 4.8858, Val Acc: 0.7333
INFO:train:Epoch 2/1000 	Train Loss: 3.4859, Train Acc: 0.7321	 Val Loss: 3.0353, Val Acc: 0.6000
INFO:train:Epoch 3/1000 	Train Loss: 1.9031, Train Acc: 0.5179	 Val Loss: 1.6060, Val Acc: 0.7333
INFO:train:Epoch 4/1000 	Train Loss: 1.1825, Train Acc: 0.8036	 Val Loss: 1.6440, Val Acc: 0.6000
INFO:train:Epoch 5/1000 	Train Loss: 0.9375, Train Acc: 0.8214	 Val Loss: 0.6772, Val Acc: 0.8000
INFO:train:Epoch 6/1000 	Train Loss: 0.4045, Train Acc: 0.9286	 Val Loss: 0.8469, Val Acc: 0.7333
INFO:train:Epoch 7/1000 	Train Loss: 0.5049, Train Acc: 0.8571	 Val Loss: 1.6750, Val Acc: 0.4667
INFO:train:Epoch 8/1000 	Train Loss: 0.4206, Train Acc: 0.8750	 Val Loss: 1.6567, Val Acc: 0.5333
INFO:train:Epoch 9/1000 	Train Loss: 0.4074, Train Acc: 0.9464	 Val Loss: 1.2114, Val Acc: 0.6667
INFO:train:Epoch 10/1000 	Train Loss: 0.3901, Train Acc: 0.9464	 Val Loss: 0.9907, Val Acc: 0.7333
INFO:train:Epoch 11/1000 	Train Loss: 0.3036, Train Acc: 0.9821	 Val Loss: 1.2224, Val Acc: 0.6667
INFO:train:Epoch 12/1000 	Train Loss: 0.3805, Train Acc: 0.9464	 Val Loss: 0.9843, Val Acc: 0.7333
INFO:train:Epoch 13/1000 	Train Loss: 0.3019, Train Acc: 0.9464	 Val Loss: 1.0114, Val Acc: 0.6000
INFO:train:Epoch 14/1000 	Train Loss: 0.3029, Train Acc: 0.9464	 Val Loss: 1.0379, Val Acc: 0.6667
INFO:train:Epoch 15/1000 	Train Loss: 0.2842, Train Acc: 1.0000	 Val Loss: 0.7773, Val Acc: 0.8667
INFO:train:Epoch 16/1000 	Train Loss: 0.2916, Train Acc: 0.9821	 Val Loss: 0.8120, Val Acc: 0.7333
INFO:train:Epoch 17/1000 	Train Loss: 0.2973, Train Acc: 0.9643	 Val Loss: 1.0437, Val Acc: 0.6000
INFO:train:Epoch 18/1000 	Train Loss: 0.2997, Train Acc: 0.9643	 Val Loss: 0.8598, Val Acc: 0.8000
INFO:train:Epoch 19/1000 	Train Loss: 0.2863, Train Acc: 0.9821	 Val Loss: 0.8460, Val Acc: 0.8000
INFO:train:Epoch 20/1000 	Train Loss: 0.2824, Train Acc: 0.9821	 Val Loss: 0.8144, Val Acc: 0.6667
INFO:train:Epoch 21/1000 	Train Loss: 0.2358, Train Acc: 1.0000	 Val Loss: 1.0975, Val Acc: 0.5333
INFO:train:Epoch 22/1000 	Train Loss: 0.2656, Train Acc: 1.0000	 Val Loss: 0.7888, Val Acc: 0.7333
INFO:train:Epoch 23/1000 	Train Loss: 0.2336, Train Acc: 1.0000	 Val Loss: 0.7638, Val Acc: 0.8000
INFO:train:Epoch 24/1000 	Train Loss: 0.2447, Train Acc: 1.0000	 Val Loss: 0.9266, Val Acc: 0.6667
INFO:train:Epoch 25/1000 	Train Loss: 0.2402, Train Acc: 1.0000	 Val Loss: 0.8815, Val Acc: 0.6000
INFO:train:Epoch 26/1000 	Train Loss: 0.2388, Train Acc: 1.0000	 Val Loss: 0.7507, Val Acc: 0.7333
INFO:train:Epoch 27/1000 	Train Loss: 0.2366, Train Acc: 1.0000	 Val Loss: 0.7098, Val Acc: 0.8000
INFO:train:Epoch 28/1000 	Train Loss: 0.2493, Train Acc: 1.0000	 Val Loss: 0.7315, Val Acc: 0.8000
INFO:train:Epoch 29/1000 	Train Loss: 0.2308, Train Acc: 1.0000	 Val Loss: 0.8151, Val Acc: 0.5333
INFO:train:Epoch 30/1000 	Train Loss: 0.2457, Train Acc: 1.0000	 Val Loss: 0.6037, Val Acc: 0.8667
INFO:train:Early stopping triggered after 30 epochs
INFO:plot:Saving attention map to: figures/model_accuracy.png
INFO:__main__:Total time taken to train the model: 13.62s
INFO:train:train got 56 / 56 correct, accuracy: 1.0
INFO:plot:Saving cofusion matrix map to: figures/train_confusion_matrix.png
INFO:train:Total time taken evaluate on train set the model: 0.20s
INFO:train:validation got 13 / 15 correct, accuracy: 0.8666666666666667
INFO:plot:Saving cofusion matrix map to: figures/validation_confusion_matrix.png
INFO:train:Total time taken evaluate on validation set the model: 0.09s
INFO:plot:Saving attention map to: figures/encoder_attention_map.png
INFO:plot:Saving attention map to: figures/decoder_attention_map.png
