INFO:__main__:Reading the dataset: fish instance-recognition
INFO:__main__:model: Transformer(
  (encoder): Encoder(
    (layers): ModuleList(
      (0-3): 4 x EncoderLayer(
        (self_attention): MultiHeadAttention(
          (query): Linear(in_features=2046, out_features=2046, bias=True)
          (key): Linear(in_features=2046, out_features=2046, bias=True)
          (value): Linear(in_features=2046, out_features=2046, bias=True)
          (fc_out): Linear(in_features=2046, out_features=2046, bias=True)
        )
        (feed_forward): FeedForward(
          (fc1): Linear(in_features=2046, out_features=128, bias=True)
          (fc2): Linear(in_features=128, out_features=2046, bias=True)
          (dropout): Dropout(p=0.2, inplace=False)
        )
        (norm1): LayerNorm((2046,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((2046,), eps=1e-05, elementwise_affine=True)
        (dropout1): Dropout(p=0.2, inplace=False)
        (dropout2): Dropout(p=0.2, inplace=False)
      )
    )
  )
  (decoder): Decoder(
    (layers): ModuleList(
      (0-3): 4 x DecoderLayer(
        (self_attention): MultiHeadAttention(
          (query): Linear(in_features=2046, out_features=2046, bias=True)
          (key): Linear(in_features=2046, out_features=2046, bias=True)
          (value): Linear(in_features=2046, out_features=2046, bias=True)
          (fc_out): Linear(in_features=2046, out_features=2046, bias=True)
        )
        (cross_attention): MultiHeadAttention(
          (query): Linear(in_features=2046, out_features=2046, bias=True)
          (key): Linear(in_features=2046, out_features=2046, bias=True)
          (value): Linear(in_features=2046, out_features=2046, bias=True)
          (fc_out): Linear(in_features=2046, out_features=2046, bias=True)
        )
        (feed_forward): FeedForward(
          (fc1): Linear(in_features=2046, out_features=128, bias=True)
          (fc2): Linear(in_features=128, out_features=2046, bias=True)
          (dropout): Dropout(p=0.2, inplace=False)
        )
        (norm1): LayerNorm((2046,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((2046,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((2046,), eps=1e-05, elementwise_affine=True)
        (dropout1): Dropout(p=0.2, inplace=False)
        (dropout2): Dropout(p=0.2, inplace=False)
        (dropout3): Dropout(p=0.2, inplace=False)
      )
    )
  )
  (fc): Linear(in_features=2046, out_features=2, bias=True)
)
INFO:__main__:Training the network
INFO:train:Epoch 1/1000 	Train Loss: 0.7616, Train Acc: 0.5536	 Val Loss: 4.1443, Val Acc: 0.6000
INFO:train:Epoch 2/1000 	Train Loss: 2.6284, Train Acc: 0.6250	 Val Loss: 5.5705, Val Acc: 0.6000
INFO:train:Epoch 3/1000 	Train Loss: 3.2781, Train Acc: 0.7321	 Val Loss: 2.3166, Val Acc: 0.7333
INFO:train:Epoch 4/1000 	Train Loss: 0.8643, Train Acc: 0.8214	 Val Loss: 2.1145, Val Acc: 0.7333
INFO:train:Epoch 5/1000 	Train Loss: 0.9212, Train Acc: 0.6964	 Val Loss: 0.8930, Val Acc: 0.7333
INFO:train:Epoch 6/1000 	Train Loss: 0.5516, Train Acc: 0.8393	 Val Loss: 1.9994, Val Acc: 0.6667
INFO:train:Epoch 7/1000 	Train Loss: 0.5339, Train Acc: 0.9107	 Val Loss: 2.2063, Val Acc: 0.6667
INFO:train:Epoch 8/1000 	Train Loss: 0.4435, Train Acc: 0.9643	 Val Loss: 1.9716, Val Acc: 0.7333
INFO:train:Epoch 9/1000 	Train Loss: 0.5341, Train Acc: 0.9464	 Val Loss: 1.8835, Val Acc: 0.6667
INFO:train:Epoch 10/1000 	Train Loss: 0.3696, Train Acc: 0.9643	 Val Loss: 1.6527, Val Acc: 0.6000
INFO:train:Epoch 11/1000 	Train Loss: 0.3200, Train Acc: 1.0000	 Val Loss: 1.4106, Val Acc: 0.6667
INFO:train:Epoch 12/1000 	Train Loss: 0.3516, Train Acc: 0.9464	 Val Loss: 0.8132, Val Acc: 0.8000
INFO:train:Epoch 13/1000 	Train Loss: 0.2719, Train Acc: 0.9821	 Val Loss: 0.6777, Val Acc: 0.6667
INFO:train:Epoch 14/1000 	Train Loss: 0.3224, Train Acc: 0.9464	 Val Loss: 0.5492, Val Acc: 0.7333
INFO:train:Epoch 15/1000 	Train Loss: 0.2862, Train Acc: 1.0000	 Val Loss: 0.7024, Val Acc: 0.6667
INFO:train:Epoch 16/1000 	Train Loss: 0.2449, Train Acc: 1.0000	 Val Loss: 1.0124, Val Acc: 0.6667
INFO:train:Epoch 17/1000 	Train Loss: 0.2733, Train Acc: 0.9821	 Val Loss: 1.1288, Val Acc: 0.6000
INFO:train:Epoch 18/1000 	Train Loss: 0.2572, Train Acc: 1.0000	 Val Loss: 1.0892, Val Acc: 0.6000
INFO:train:Epoch 19/1000 	Train Loss: 0.2588, Train Acc: 1.0000	 Val Loss: 1.0328, Val Acc: 0.6667
INFO:train:Epoch 20/1000 	Train Loss: 0.2917, Train Acc: 0.9821	 Val Loss: 1.0480, Val Acc: 0.6000
INFO:train:Epoch 21/1000 	Train Loss: 0.2427, Train Acc: 1.0000	 Val Loss: 1.0248, Val Acc: 0.6000
INFO:train:Epoch 22/1000 	Train Loss: 0.2452, Train Acc: 1.0000	 Val Loss: 0.9414, Val Acc: 0.6000
INFO:train:Epoch 23/1000 	Train Loss: 0.2482, Train Acc: 1.0000	 Val Loss: 0.8008, Val Acc: 0.6000
INFO:train:Epoch 24/1000 	Train Loss: 0.2423, Train Acc: 1.0000	 Val Loss: 0.6626, Val Acc: 0.6000
INFO:train:Epoch 25/1000 	Train Loss: 0.2495, Train Acc: 1.0000	 Val Loss: 0.6835, Val Acc: 0.6667
INFO:train:Epoch 26/1000 	Train Loss: 0.2252, Train Acc: 1.0000	 Val Loss: 0.8477, Val Acc: 0.6000
INFO:train:Epoch 27/1000 	Train Loss: 0.2255, Train Acc: 1.0000	 Val Loss: 1.0115, Val Acc: 0.6000
INFO:train:Epoch 28/1000 	Train Loss: 0.2346, Train Acc: 1.0000	 Val Loss: 1.0051, Val Acc: 0.6000
INFO:train:Epoch 29/1000 	Train Loss: 0.2347, Train Acc: 1.0000	 Val Loss: 0.8988, Val Acc: 0.6667
INFO:train:Epoch 30/1000 	Train Loss: 0.2218, Train Acc: 1.0000	 Val Loss: 0.7749, Val Acc: 0.6667
INFO:train:Early stopping triggered after 30 epochs
INFO:plot:Saving attention map to: figures/model_accuracy.png
INFO:__main__:Total time taken to train the model: 13.10s
INFO:train:train got 56 / 56 correct, accuracy: 1.0
INFO:plot:Saving cofusion matrix map to: figures/train_confusion_matrix.png
INFO:train:Total time taken evaluate on train set the model: 0.20s
INFO:train:validation got 10 / 15 correct, accuracy: 0.6666666666666666
INFO:plot:Saving cofusion matrix map to: figures/validation_confusion_matrix.png
INFO:train:Total time taken evaluate on validation set the model: 0.09s
INFO:plot:Saving attention map to: figures/encoder_attention_map.png
INFO:plot:Saving attention map to: figures/decoder_attention_map.png
