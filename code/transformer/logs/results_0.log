INFO:__main__:Reading the dataset: fish species
INFO:__main__:model: Transformer(
  (encoder): Encoder(
    (layers): ModuleList(
      (0-2): 3 x EncoderLayer(
        (self_attention): MultiHeadAttention(
          (query): Linear(in_features=1023, out_features=1023, bias=True)
          (key): Linear(in_features=1023, out_features=1023, bias=True)
          (value): Linear(in_features=1023, out_features=1023, bias=True)
          (fc_out): Linear(in_features=1023, out_features=1023, bias=True)
        )
        (feed_forward): FeedForward(
          (fc1): Linear(in_features=1023, out_features=128, bias=True)
          (fc2): Linear(in_features=128, out_features=1023, bias=True)
          (dropout): Dropout(p=0.2, inplace=False)
        )
        (norm1): LayerNorm((1023,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((1023,), eps=1e-05, elementwise_affine=True)
        (dropout1): Dropout(p=0.2, inplace=False)
        (dropout2): Dropout(p=0.2, inplace=False)
      )
    )
  )
  (decoder): Decoder(
    (layers): ModuleList(
      (0-2): 3 x DecoderLayer(
        (self_attention): MultiHeadAttention(
          (query): Linear(in_features=1023, out_features=1023, bias=True)
          (key): Linear(in_features=1023, out_features=1023, bias=True)
          (value): Linear(in_features=1023, out_features=1023, bias=True)
          (fc_out): Linear(in_features=1023, out_features=1023, bias=True)
        )
        (cross_attention): MultiHeadAttention(
          (query): Linear(in_features=1023, out_features=1023, bias=True)
          (key): Linear(in_features=1023, out_features=1023, bias=True)
          (value): Linear(in_features=1023, out_features=1023, bias=True)
          (fc_out): Linear(in_features=1023, out_features=1023, bias=True)
        )
        (feed_forward): FeedForward(
          (fc1): Linear(in_features=1023, out_features=128, bias=True)
          (fc2): Linear(in_features=128, out_features=1023, bias=True)
          (dropout): Dropout(p=0.2, inplace=False)
        )
        (norm1): LayerNorm((1023,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((1023,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((1023,), eps=1e-05, elementwise_affine=True)
        (dropout1): Dropout(p=0.2, inplace=False)
        (dropout2): Dropout(p=0.2, inplace=False)
        (dropout3): Dropout(p=0.2, inplace=False)
      )
    )
  )
  (fc): Linear(in_features=1023, out_features=2, bias=True)
)
INFO:__main__:Training the network
INFO:train:Epoch 1/10 	Train Loss: 0.7266, Train Acc: 0.5000	 Val Loss: 0.4845, Val Acc: 0.7727
INFO:train:Epoch 2/10 	Train Loss: 0.5072, Train Acc: 0.8140	 Val Loss: 0.3874, Val Acc: 0.8636
INFO:train:Epoch 3/10 	Train Loss: 0.4008, Train Acc: 0.8953	 Val Loss: 0.3334, Val Acc: 0.9091
INFO:train:Epoch 4/10 	Train Loss: 0.3248, Train Acc: 0.9419	 Val Loss: 0.2834, Val Acc: 0.9545
INFO:train:Epoch 5/10 	Train Loss: 0.2712, Train Acc: 0.9651	 Val Loss: 0.2585, Val Acc: 1.0000
INFO:train:Epoch 6/10 	Train Loss: 0.2652, Train Acc: 0.9651	 Val Loss: 0.2649, Val Acc: 1.0000
INFO:train:Epoch 7/10 	Train Loss: 0.2424, Train Acc: 0.9767	 Val Loss: 0.2685, Val Acc: 1.0000
INFO:train:Epoch 8/10 	Train Loss: 0.2409, Train Acc: 0.9884	 Val Loss: 0.2534, Val Acc: 1.0000
INFO:train:Epoch 9/10 	Train Loss: 0.2432, Train Acc: 1.0000	 Val Loss: 0.2548, Val Acc: 1.0000
INFO:train:Epoch 10/10 	Train Loss: 0.2357, Train Acc: 1.0000	 Val Loss: 0.2623, Val Acc: 1.0000
INFO:plot:Saving attention map to: figures/model_accuracy.png
INFO:__main__:Total time taken to train the model: 2.65s
INFO:train:train got 64 / 64 correct, accuracy: 1.0
INFO:plot:Saving cofusion matrix map to: figures/train_confusion_matrix.png
INFO:train:train got 22 / 22 correct, accuracy: 1.0
INFO:plot:Saving cofusion matrix map to: figures/train_confusion_matrix.png
INFO:train:Total time taken evaluate on train set the model: 0.24s
INFO:train:validation got 22 / 22 correct, accuracy: 1.0
INFO:plot:Saving cofusion matrix map to: figures/validation_confusion_matrix.png
INFO:train:Total time taken evaluate on validation set the model: 0.09s
INFO:plot:Saving attention map to: figures/encoder_attention_map.png
INFO:plot:Saving attention map to: figures/decoder_attention_map.png
