results = {
    "Transformer": {
        "Species": {
            "train": [1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000],
            "test": [1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000]
        },
        "Part": {
            "train": [1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000],
            "test": [0.8333, 1.0000, 1.0000, 1.0000, 1.0000, 0.8333, 1.0000, 1.0000, 1.0000, 1.0000]
        },
        "Oil": {
            "train": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
            "test": [0.6297, 0.9714, 1.0000, 1.0000, 0.8538, 0.5714, 0.8929, 0.9714, 1.0000, 1.0000]
        },
        "Cross-species": {
            "train": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
            "test": [0.8333, 0.9744, 1.0000, 1.0000, 1.0000, 0.8171, 1.0000, 1.0000, 1.0000, 1.0000]
        }
    },
    "LSTM": {
        "Species": {
            "train": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
            "test": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000]
        },
        "Part": {
            "train": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
            "test": [0.7500, 1.0000, 1.0000, 1.0000, 1.0000, 0.6111, 1.0000, 1.0000, 1.0000, 1.0000]
        },
        "Oil": {
            "train": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
            "test": [0.6607, 1.0000, 1.0000, 1.0000, 1.0000, 0.6111, 1.0000, 1.0000, 1.0000, 1.0000]
        },
        "Cross-species": {
            "train": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
            "test": [0.8364, 1.0000, 1.0000, 1.0000, 1.0000, 0.8082, 1.0000, 1.0000, 1.0000, 1.0000]
        }
    },
    "VAE": {
        "Species": {
            "train": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
            "test": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000]
        },
        "Part": {
            "train": [0.8024, 0.8532, 0.7238, 0.8524, 0.9048, 0.8000, 0.9375, 0.8413, 0.9167, 0.9107],
            "test": [0.7500, 1.0000, 1.0000, 0.9000, 0.7500, 0.7500, 1.0000, 1.0000, 0.9000, 0.8333]
        },
        "Oil": {
            "train": [0.5810, 0.6341, 0.6081, 0.6876, 0.7536, 0.3438, 0.6161, 0.4748, 0.7069, 0.6841],
            "test": [0.5546, 0.6865, 0.7933, 0.6957, 0.7017, 0.5784, 0.6289, 0.8556, 0.7381, 0.8056]
        },
        "Cross-species": {
            "train": [0.7444, 0.9676, 0.9872, 0.9861, 1.0000, 0.8610, 0.9210, 0.9861, 0.8778, 1.0000],
            "test": [0.9406, 1.0000, 1.0000, 1.0000, 1.0000, 0.8021, 1.0000, 1.0000, 1.0000, 1.0000]
        }
    },
    "KAN": {
        "Species": {
            "train": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
            "test": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000]
        },
        "Part": {
            "train": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
            "test": [0.8333, 1.0000, 1.0000, 1.0000, 1.0000, 0.8333, 1.0000, 1.0000, 1.0000, 1.0000]
        },
        "Oil": {
            "train": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
            "test": [0.7556, 1.0000, 1.0000, 1.0000, 1.0000, 0.6667, 1.0000, 1.0000, 1.0000, 1.0000]
        },
        "Cross-species": {
            "train": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
            "test": [0.8487, 1.0000, 1.0000, 1.0000, 1.0000, 0.8648, 1.0000, 1.0000, 1.0000, 1.0000]
        }
    },
    "CNN": {
        "Species": {
            "train": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
            "test": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000]
        },
        "Part": {
            "train": [0.8833, 0.8413, 0.9097, 1.0000, 0.9722, 0.9444, 0.9190, 0.9246, 0.9524, 0.9667],
            "test": [0.6000, 0.9000, 1.0000, 1.0000, 1.0000, 0.6250, 1.0000, 1.0000, 1.0000, 1.0000]
        },
        "Oil": {
            "train": [0.7609, 0.9020, 0.9320, 0.8444, 0.9000, 0.8044, 0.9556, 0.9167, 0.9345, 0.9558],
            "test": [0.6042, 0.9238, 1.0000, 1.0000, 1.0000, 0.6580, 0.9000, 1.0000, 1.0000, 1.0000]
        },
        "Cross-species": {
            "train": [0.9505, 1.0000, 0.9722, 0.9841, 0.9521, 0.8903, 0.9825, 0.9683, 0.9444, 0.9671],
            "test": [0.8246, 1.0000, 1.0000, 1.0000, 1.0000, 0.8095, 0.9667, 1.0000, 1.0000, 1.0000]
        }
    },
    "Mamba": {
        "Species": {
            "train": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
            "test": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000]
        },
        "Part": {
            "train": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
            "test": [0.8333, 1.0000, 1.0000, 1.0000, 1.0000, 0.8333, 1.0000, 1.0000, 1.0000, 1.0000]
        },
        "Oil": {
            "train": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
            "test": [0.6088, 1.0000, 1.0000, 1.0000, 1.0000, 0.6190, 1.0000, 1.0000, 1.0000, 1.0000]
        },
        "Cross-species": {
            "train": [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
            "test": [0.8444, 1.0000, 1.0000, 1.0000, 1.0000, 0.8274, 1.0000, 1.0000, 1.0000, 1.0000]
        }
    },
    # "MCIFC": {
    #     "Species": {
    #         "train": [0.989583, 0.989583, 0.986842, 1.0000, 0.989583],
    #         "test": [1.0000, 0.575000, 0.875000, 0.833333, 0.763889]
    #     },
    #     "Part": {
    #         "train": [0.925000, 0.866667, 0.900000, 0.916667, 0.802778],
    #         "test": [0.200000, 0.333333, 0.833333, 0.000000, 0.000000]
    #     },
    #     "Oil": {
    #         "train": [0.537415, 0.554422, 0.616327, 0.466667, 0.528571],
    #         "test": [0.142857, 0.166667, 0.154762, 0.345238, 0.107143]
    #     },
    #     "Cross-species": {
    #         "train": [0.863182, 0.752437, 0.864888, 0.860755, 0.804843],
    #         "test": [0.675926, 0.674074, 0.822222, 0.407407, 0.712963]
    #     }
    # }
}

color_map = {
        'Species': 'red',
        'Part': 'blue',
        'Oil': 'green',
        'Cross-species': 'purple'
}

import matplotlib.pyplot as plt
import numpy as np

# Assuming the 'results' dictionary is already defined as in the previous response

def prepare_data(results):
    data = []
    labels = []
    colors = []
    positions = []
    
    methods = list(results.keys())
    datasets = list(results[methods[0]].keys())
    
    for i, method in enumerate(methods):
        for j, dataset in enumerate(datasets):
            data.append(results[method][dataset]['test'])
            labels.append(f"{method}\n{dataset}")
            colors.append(color_map[dataset])
            positions.append(i * (len(datasets) + 1) + j)
    
    return data, labels, colors, positions, methods, datasets

def plot_results(results):
    data, labels, colors, positions, methods, datasets = prepare_data(results)
    
    fig, ax = plt.subplots(figsize=(15, 10))
    
    bplot = ax.boxplot(data, positions=positions, patch_artist=True, labels=labels)
    
    for patch, color in zip(bplot['boxes'], colors):
        patch.set_facecolor(color)
    
    ax.set_title('Performance Comparison of Different Methods Across Datasets')
    ax.set_ylabel('Performance')
    ax.set_xlabel('Method and Dataset')
    
    # Set x-ticks to be in the middle of each group
    group_positions = [i * (len(datasets) + 1) + (len(datasets) - 1) / 2 for i in range(len(methods))]
    ax.set_xticks(group_positions)
    ax.set_xticklabels(methods, rotation=45, ha='right')
    
    # Add a legend for dataset colors
    legend_elements = [plt.Rectangle((0,0),1,1, facecolor=color, edgecolor='black') for color in color_map.values()]
    ax.legend(legend_elements, color_map.keys(), loc='upper right', title='Datasets')
    
    plt.tight_layout()
    plt.savefig('results.png')
    plt.show()

# Call the function to plot the results
plot_results(results)